import asyncio
import os
import random
from datetime import datetime, timedelta
from dotenv import load_dotenv
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select, func, delete

# Importera databas-modeller
from models import Base, Boat

# ===== KONFIGURATION =====
load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")
if DATABASE_URL.startswith("postgresql://"):
    DATABASE_URL = DATABASE_URL.replace(
        "postgresql://", "postgresql+asyncpg://", 1)

async_engine = create_async_engine(DATABASE_URL)
async_session = sessionmaker(
    async_engine,
    class_=AsyncSession,
    expire_on_commit=False
)

# Realistiska b√•tnamn f√∂r demo
BOAT_NAMES = [
    "Sj√∂farten", "Vindkraft", "Havsbris", "Kattegatt", "Sk√§rg√•rd", "Maritim",
    "Neptun", "Poseidon", "Triton", "Oceania", "Atlantis", "Pacific Dream",
    "Nordic Star", "Baltic Queen", "Gotland", "√ñresund", "M√§lardrottning",
    "Archipelago", "Coastline", "Seaside", "Marina", "Anchorage", "Harbor",
    "Sailor's Dream", "Captain's Pride", "First Mate", "Compass Rose",
    "Sunset Cruise", "Dawn Patrol", "Midnight Sun", "Aurora", "Stella Maris",
    "Sea Eagle", "Storm Petrel", "Cormorant", "Seagull", "Albatross"
]


async def clear_boats():
    """Rensa befintliga b√•tar"""
    async with async_session() as db:
        try:
            result = await db.execute(delete(Boat))
            await db.commit()
            print(f"üóëÔ∏è  Rensade {result.rowcount} befintliga b√•tar")
        except Exception as e:
            print(f"‚ùå Fel vid rensning: {e}")
            await db.rollback()


async def add_demo_boats():
    """L√§gg till realistiska demo-b√•tar f√∂r AI-optimering"""
    async with async_session() as db:
        try:
            # Kontrollera om det redan finns b√•tar
            boat_count = await db.execute(select(func.count()).select_from(Boat))
            existing_boats = boat_count.scalar()

            if existing_boats > 0:
                print(
                    f"‚ÑπÔ∏è  Det finns redan {existing_boats} b√•tar i databasen")
                choice = input(
                    "Vill du rensa och skapa nya? (ja/nej): ").lower()
                if choice in ['ja', 'j', 'yes', 'y']:
                    await clear_boats()
                else:
                    print("‚úÖ Beh√•ller befintliga b√•tar")
                    return

            test_boats = []
            today = datetime.now().date()

            print("üîß Genererar demo-b√•tar...")

            # Sm√•b√•tar (m√•nga, korta vistelser)
            for i in range(15):
                test_boats.append(Boat(
                    name=f"{random.choice(BOAT_NAMES)} {i+1}",
                    width=round(random.uniform(1.5, 2.2), 1),
                    arrival=today + timedelta(days=random.randint(0, 5)),
                    departure=today + timedelta(days=random.randint(2, 8))
                ))

            # Medelstora b√•tar (vanligast typ)
            for i in range(18):
                test_boats.append(Boat(
                    name=f"{random.choice(BOAT_NAMES)} Express {i+1}",
                    width=round(random.uniform(2.2, 2.8), 1),
                    arrival=today + timedelta(days=random.randint(0, 7)),
                    departure=today + timedelta(days=random.randint(4, 12))
                ))

            # Stora b√•tar (f√§rre, l√§ngre vistelser)
            for i in range(10):
                test_boats.append(Boat(
                    name=f"{random.choice(BOAT_NAMES)} Cruiser {i+1}",
                    width=round(random.uniform(2.8, 3.5), 1),
                    arrival=today + timedelta(days=random.randint(0, 10)),
                    departure=today + timedelta(days=random.randint(8, 20))
                ))

            # Extra stora b√•tar (f√•, riktigt utmanande)
            for i in range(5):
                test_boats.append(Boat(
                    name=f"{random.choice(BOAT_NAMES)} Mega {i+1}",
                    width=round(random.uniform(3.5, 4.5), 1),
                    arrival=today + timedelta(days=random.randint(0, 8)),
                    departure=today + timedelta(days=random.randint(10, 25))
                ))

            # Problem-b√•tar (verkligt stora, skapar utmaning f√∂r AI)
            for i in range(3):
                test_boats.append(Boat(
                    name=f"Superb√•t {i+1}",
                    width=round(random.uniform(4.5, 5.2), 1),
                    arrival=today + timedelta(days=random.randint(1, 6)),
                    departure=today + timedelta(days=random.randint(15, 30))
                ))

            # Samma-dag b√•tar (skapar konkurrens)
            conflict_day = today + timedelta(days=3)
            for i in range(6):
                test_boats.append(Boat(
                    name=f"Konflikt {i+1}",
                    width=round(random.uniform(2.0, 3.2), 1),
                    arrival=conflict_day,
                    departure=conflict_day +
                    timedelta(days=random.randint(3, 10))
                ))

            # Spara alla testb√•tar
            db.add_all(test_boats)
            await db.commit()

            print(f"‚úÖ {len(test_boats)} demo-b√•tar har skapats!")

            # Visa statistik
            small = sum(1 for b in test_boats if b.width < 2.2)
            medium = sum(1 for b in test_boats if 2.2 <= b.width < 2.8)
            large = sum(1 for b in test_boats if 2.8 <= b.width < 3.5)
            xl = sum(1 for b in test_boats if b.width >= 3.5)

            print(f"\nüìä Storleksf√∂rdelning:")
            print(f"   üö§ Sm√• (< 2.2m): {small} b√•tar")
            print(f"   üõ•Ô∏è  Medium (2.2-2.8m): {medium} b√•tar")
            print(f"   üö¢ Stora (2.8-3.5m): {large} b√•tar")
            print(f"   üõ≥Ô∏è  Extra stora (> 3.5m): {xl} b√•tar")

            stays = [(b.departure - b.arrival).days for b in test_boats]
            avg_stay = sum(stays) / len(stays)
            print(f"\n‚è±Ô∏è  Genomsnittlig vistelse: {avg_stay:.1f} dagar")

            arriving_soon = sum(1 for b in test_boats if 0 <=
                                (b.arrival - today).days <= 7)
            print(f"üìÖ Ankomster n√§sta vecka: {arriving_soon} b√•tar")

            print(f"\nüéØ REDO F√ñR AI-OPTIMERING!")
            print(
                f"   Nu kan du testa optimeringen med {len(test_boats)} olika b√•tar!")

        except Exception as e:
            print(f"‚ùå Fel vid skapande av testb√•tar: {str(e)}")
            await db.rollback()
            raise


async def verify_boats():
    """Verifiera att b√•tar finns i databasen"""
    async with async_session() as db:
        try:
            boat_count = await db.execute(select(func.count()).select_from(Boat))
            total_boats = boat_count.scalar()

            print(f"‚úì Totalt antal b√•tar i databasen: {total_boats}")

            if total_boats > 0:
                boats = await db.execute(select(Boat).limit(5))
                print("\nExempel p√• b√•tar:")
                for boat in boats.scalars():
                    days = (boat.departure - boat.arrival).days
                    print(
                        f"  - {boat.name}: {boat.width}m bred, {days} dagars vistelse")

            return total_boats

        except Exception as e:
            print(f"‚ùå Fel vid verifiering: {str(e)}")
            return 0


async def main():
    """Huvudfunktion"""
    try:
        print("===== DEMO-B√ÖTAR F√ñR AI-OPTIMERING =====")

        # L√§gg till demo-b√•tar
        await add_demo_boats()

        # Verifiera att de lagts till
        total_boats = await verify_boats()

        if total_boats > 0:
            print(
                f"\nüéâ Klart! Nu kan du testa AI-optimeringen med {total_boats} b√•tar.")
            print("   G√• till frontend och klicka 'Starta Automatisk Optimering'!")
        else:
            print("\n‚ùå Inga b√•tar hittades. N√•got gick fel.")

    except Exception as e:
        print(f"\n‚ùå PROCESSEN MISSLYCKADES: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main())
